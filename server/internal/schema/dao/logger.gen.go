// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gin-api-mono/internal/schema/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"gorm.io/plugin/dbresolver"
)

func newLogger(db *gorm.DB, opts ...gen.DOOption) logger {
	_logger := logger{}

	_logger.loggerDo.UseDB(db, opts...)
	_logger.loggerDo.UseModel(&model.Logger{})

	tableName := _logger.loggerDo.TableName()
	_logger.ALL = field.NewAsterisk(tableName)
	_logger.ID = field.NewString(tableName, "id")
	_logger.Level = field.NewString(tableName, "level")
	_logger.TraceID = field.NewString(tableName, "trace_id")
	_logger.UserID = field.NewString(tableName, "user_id")
	_logger.Tag = field.NewString(tableName, "tag")
	_logger.Message = field.NewString(tableName, "message")
	_logger.Stack = field.NewString(tableName, "stack")
	_logger.Data = field.NewString(tableName, "data")
	_logger.CreatedAt = field.NewTime(tableName, "created_at")

	_logger.fillFieldMap()

	return _logger
}

type logger struct {
	loggerDo

	ALL       field.Asterisk
	ID        field.String
	Level     field.String
	TraceID   field.String
	UserID    field.String
	Tag       field.String
	Message   field.String
	Stack     field.String
	Data      field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (l logger) Table(newTableName string) *logger {
	l.loggerDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logger) As(alias string) *logger {
	l.loggerDo.DO = *(l.loggerDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logger) updateTableName(table string) *logger {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "id")
	l.Level = field.NewString(table, "level")
	l.TraceID = field.NewString(table, "trace_id")
	l.UserID = field.NewString(table, "user_id")
	l.Tag = field.NewString(table, "tag")
	l.Message = field.NewString(table, "message")
	l.Stack = field.NewString(table, "stack")
	l.Data = field.NewString(table, "data")
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *logger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logger) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 9)
	l.fieldMap["id"] = l.ID
	l.fieldMap["level"] = l.Level
	l.fieldMap["trace_id"] = l.TraceID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["tag"] = l.Tag
	l.fieldMap["message"] = l.Message
	l.fieldMap["stack"] = l.Stack
	l.fieldMap["data"] = l.Data
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l logger) clone(db *gorm.DB) logger {
	l.loggerDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logger) replaceDB(db *gorm.DB) logger {
	l.loggerDo.ReplaceDB(db)
	return l
}

type loggerDo struct{ gen.DO }

type ILoggerDo interface {
	gen.SubQuery
	Debug() ILoggerDo
	WithContext(ctx context.Context) ILoggerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoggerDo
	WriteDB() ILoggerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoggerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoggerDo
	Not(conds ...gen.Condition) ILoggerDo
	Or(conds ...gen.Condition) ILoggerDo
	Select(conds ...field.Expr) ILoggerDo
	Where(conds ...gen.Condition) ILoggerDo
	Order(conds ...field.Expr) ILoggerDo
	Distinct(cols ...field.Expr) ILoggerDo
	Omit(cols ...field.Expr) ILoggerDo
	Join(table schema.Tabler, on ...field.Expr) ILoggerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoggerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoggerDo
	Group(cols ...field.Expr) ILoggerDo
	Having(conds ...gen.Condition) ILoggerDo
	Limit(limit int) ILoggerDo
	Offset(offset int) ILoggerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoggerDo
	Unscoped() ILoggerDo
	Create(values ...*model.Logger) error
	CreateInBatches(values []*model.Logger, batchSize int) error
	Save(values ...*model.Logger) error
	First() (*model.Logger, error)
	Take() (*model.Logger, error)
	Last() (*model.Logger, error)
	Find() ([]*model.Logger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Logger, err error)
	FindInBatches(result *[]*model.Logger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Logger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoggerDo
	Assign(attrs ...field.AssignExpr) ILoggerDo
	Joins(fields ...field.RelationField) ILoggerDo
	Preload(fields ...field.RelationField) ILoggerDo
	FirstOrInit() (*model.Logger, error)
	FirstOrCreate() (*model.Logger, error)
	FindByPage(offset int, limit int) (result []*model.Logger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoggerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l loggerDo) Debug() ILoggerDo {
	return l.withDO(l.DO.Debug())
}

func (l loggerDo) WithContext(ctx context.Context) ILoggerDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loggerDo) ReadDB() ILoggerDo {
	return l.Clauses(dbresolver.Read)
}

func (l loggerDo) WriteDB() ILoggerDo {
	return l.Clauses(dbresolver.Write)
}

func (l loggerDo) Session(config *gorm.Session) ILoggerDo {
	return l.withDO(l.DO.Session(config))
}

func (l loggerDo) Clauses(conds ...clause.Expression) ILoggerDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loggerDo) Returning(value interface{}, columns ...string) ILoggerDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loggerDo) Not(conds ...gen.Condition) ILoggerDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loggerDo) Or(conds ...gen.Condition) ILoggerDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loggerDo) Select(conds ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loggerDo) Where(conds ...gen.Condition) ILoggerDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loggerDo) Order(conds ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loggerDo) Distinct(cols ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loggerDo) Omit(cols ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loggerDo) Join(table schema.Tabler, on ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loggerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loggerDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loggerDo) Group(cols ...field.Expr) ILoggerDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loggerDo) Having(conds ...gen.Condition) ILoggerDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loggerDo) Limit(limit int) ILoggerDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loggerDo) Offset(offset int) ILoggerDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loggerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoggerDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loggerDo) Unscoped() ILoggerDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loggerDo) Create(values ...*model.Logger) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loggerDo) CreateInBatches(values []*model.Logger, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loggerDo) Save(values ...*model.Logger) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loggerDo) First() (*model.Logger, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logger), nil
	}
}

func (l loggerDo) Take() (*model.Logger, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logger), nil
	}
}

func (l loggerDo) Last() (*model.Logger, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logger), nil
	}
}

func (l loggerDo) Find() ([]*model.Logger, error) {
	result, err := l.DO.Find()
	return result.([]*model.Logger), err
}

func (l loggerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Logger, err error) {
	buf := make([]*model.Logger, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loggerDo) FindInBatches(result *[]*model.Logger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loggerDo) Attrs(attrs ...field.AssignExpr) ILoggerDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loggerDo) Assign(attrs ...field.AssignExpr) ILoggerDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loggerDo) Joins(fields ...field.RelationField) ILoggerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loggerDo) Preload(fields ...field.RelationField) ILoggerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loggerDo) FirstOrInit() (*model.Logger, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logger), nil
	}
}

func (l loggerDo) FirstOrCreate() (*model.Logger, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Logger), nil
	}
}

func (l loggerDo) FindByPage(offset int, limit int) (result []*model.Logger, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loggerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loggerDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loggerDo) Delete(models ...*model.Logger) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loggerDo) withDO(do gen.Dao) *loggerDo {
	l.DO = *do.(*gen.DO)
	return l
}
